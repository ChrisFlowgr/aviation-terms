name: Ingest Batch (Paste JSON → PR)

on:
  workflow_dispatch:
    inputs:
      batch_id:
        description: "Batch ID (e.g. 2025-10-30-batch-002)"
        required: true
        type: string
      base_branch:
        description: "Base branch"
        required: true
        default: "main"
        type: string
      json:
        description: "Paste the entire batch JSON here"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  ingest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          npm init -y
          npm install @octokit/rest

      - name: Write ingest script
        run: |
          cat > scripts/ingest-batch.mjs <<'JS'
          import { Octokit } from "@octokit/rest";

          const {
            GITHUB_TOKEN,
            GITHUB_REPOSITORY,
            INPUT_BATCH_ID,
            INPUT_BASE_BRANCH,
            INPUT_JSON
          } = process.env;

          if (!GITHUB_TOKEN) throw new Error("Missing GITHUB_TOKEN");
          const octokit = new Octokit({ auth: GITHUB_TOKEN });

          const [owner, repo] = GITHUB_REPOSITORY.split("/");
          const batchId = INPUT_BATCH_ID.trim();
          const base = INPUT_BASE_BRANCH.trim() || "main";
          const branch = `content/${batchId}`;
          const batchPath = `data/batches/${batchId}.json`;

          // helper: base64
          const b64 = (s) => Buffer.from(s, "utf8").toString("base64");

          // 1) get base SHA
          const refRes = await octokit.git.getRef({ owner, repo, ref: `heads/${base}` });
          const baseSha = refRes.data.object.sha;

          // 2) create branch (ignore 422 if exists)
          try {
            await octokit.git.createRef({
              owner, repo,
              ref: `refs/heads/${branch}`,
              sha: baseSha
            });
            console.log(`Created branch ${branch}`);
          } catch (e) {
            if (e.status === 422) {
              console.log(`Branch ${branch} already exists; continuing.`);
            } else {
              throw e;
            }
          }

          // 3) PUT batch file
          await octokit.repos.createOrUpdateFileContents({
            owner, repo, path: batchPath,
            message: `chore(content): add ${batchId}`,
            content: b64(INPUT_JSON),
            branch
          });
          console.log(`Wrote ${batchPath}`);

          // 4) Read manifest from base to get sha + JSON
          const manifestPath = "data/manifest.json";
          const manRes = await octokit.repos.getContent({
            owner, repo, path: manifestPath, ref: base
          });
          const manifestSha = manRes.data.sha;
          const manifestJSON = JSON.parse(
            Buffer.from(manRes.data.content, "base64").toString("utf8")
          );

          // 5) Compute termCount from pasted JSON
          let termCount = 0;
          try {
            const parsed = JSON.parse(INPUT_JSON);
            termCount = Array.isArray(parsed.terms) ? parsed.terms.length : 0;
          } catch {}

          // 6) Append new entry if not present
          manifestJSON.batches = manifestJSON.batches || [];
          const exists = manifestJSON.batches.some(b => b.id === batchId);
          if (!exists) {
            manifestJSON.batches.push({
              id: batchId,
              path: batchPath,
              createdAt: new Date().toISOString(),
              termCount,
              categories: ["Performance"] // adjust if you pass other categories later
            });
          }

          // 7) PUT updated manifest to branch (must include sha)
          await octokit.repos.createOrUpdateFileContents({
            owner, repo, path: manifestPath,
            message: `chore(content): register ${batchId} in manifest`,
            content: b64(JSON.stringify(manifestJSON, null, 2)),
            branch,
            sha: manifestSha
          });
          console.log(`Updated manifest on ${branch}`);

          // 8) Open PR (ignore 422 if already open)
          try {
            await octokit.pulls.create({
              owner, repo,
              title: `Add ${batchId}`,
              head: branch,
              base
            });
            console.log(`Opened PR from ${branch} → ${base}`);
          } catch (e) {
            if (e.status === 422) {
              console.log("PR already exists; continuing.");
            } else {
              throw e;
            }
          }
          JS

      - name: Run ingest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_BATCH_ID: ${{ inputs.batch_id }}
          INPUT_BASE_BRANCH: ${{ inputs.base_branch }}
          INPUT_JSON: ${{ inputs.json }}
        run: node scripts/ingest-batch.mjs
